{
  "openapi": "3.0.0",
  "info": {
    "title": "Service Provider & Consumer API",
    "version": "1.0.0",
    "description": "API for managing service providers and consumers (SQLite version)"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "Service Providers",
      "description": "Operations related to service providers"
    },
    {
      "name": "Consumers",
      "description": "Operations related to consumers"
    }
  ],
  "paths": {
    "/api/sp-create": {
      "post": {
        "summary": "Create a new service provider",
        "tags": ["Service Providers"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceProvider"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Service provider created successfully"
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/sp-list": {
      "get": {
        "summary": "Get all service providers",
        "tags": ["Service Providers"],
        "responses": {
          "200": {
            "description": "List of service providers"
          }
        }
      }
    },
    "/api/sp-get/{id}": {
      "get": {
        "summary": "Get a service provider by ID",
        "tags": ["Service Providers"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service provider details"
          },
          "404": {
            "description": "Service provider not found"
          }
        }
      }
    },
    "/api/sp-update/{id}": {
      "put": {
        "summary": "Update a service provider by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceProvider"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Service provider updated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Service provider not found"
          }
        }
      }
    },
    "/api/sp-delete/{id}": {
      "delete": {
        "summary": "Delete a service provider by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service provider deleted successfully"
          },
          "404": {
            "description": "Service provider not found"
          }
        }
      }
    },
    "/api/sp-filter": {
      "post": {
        "summary": "Filter service providers",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceProviderFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filtered list of service providers"
          }
        }
      }
    },
    "/api/sp-stats": {
      "get": {
        "summary": "Get service provider statistics",
        "responses": {
          "200": {
            "description": "Statistics data"
          }
        }
      }
    },
    "/api/cities": {
      "get": {
        "summary": "Get unique cities where service providers are available",
        "responses": {
          "200": {
            "description": "List of unique cities"
          }
        }
      }
    },
    "/api/sp-pending": {
      "get": {
        "summary": "Get pending service providers",
        "responses": {
          "200": {
            "description": "List of pending service providers"
          }
        }
      }
    },
    "/api/sp-subscription-status/{id}": {
      "get": {
        "summary": "Get subscription status for a service provider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription status"
          },
          "404": {
            "description": "Service provider not found"
          }
        }
      }
    },
    "/api/sp-renew-subscription/{id}": {
      "post": {
        "summary": "Renew service provider subscription",
        "description": "Renew subscription for a specific service provider",
        "tags": ["Service Providers"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Service provider ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "months": {
                    "type": "integer",
                    "description": "Number of months to renew",
                    "minimum": 1,
                    "example": 1
                  }
                },
                "required": ["months"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription renewed successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Service provider not found"
          }
        }
      }
    },
    "/api/sp-signin": {
      "post": {
        "summary": "Sign in service provider",
        "description": "Authenticate service provider using 6-digit PIN",
        "tags": ["Service Providers"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pin": { 
                    "type": "string", 
                    "description": "6-digit PIN code",
                    "pattern": "^[0-9]{6}$",
                    "minLength": 6,
                    "maxLength": 6,
                    "example": "123456"
                  }
                },
                "required": ["pin"]
              },
              "examples": {
                "signinServiceProvider": {
                  "summary": "Sign in credentials",
                  "value": {
                    "pin": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Service provider signed in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": { "$ref": "#/components/schemas/ServiceProviderResponse" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error - missing or invalid fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string" },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string" },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/payment-upload": {
      "post": {
        "summary": "Upload payment proof image",
        "tags": ["Service Providers"],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment proof image uploaded successfully"
          },
          "400": {
            "description": "Bad request - missing or invalid file"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
         "/api/consumer-create": {
       "post": {
         "summary": "Create a new consumer",
         "description": "Creates a new consumer with name, city, and 6-digit PIN. Validates that the consumer doesn't already exist with the same name and city combination.",
         "tags": ["Consumers"],
         "requestBody": {
           "required": true,
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/Consumer"
               },
               "examples": {
                 "validConsumer": {
                   "summary": "Valid consumer data",
                   "value": {
                     "name": "John Doe",
                     "city": "Karachi",
                     "pin": "123456"
                   }
                 }
               }
             }
           }
         },
         "responses": {
           "201": {
             "description": "Consumer created successfully",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "object",
                   "properties": {
                     "success": { "type": "boolean" },
                     "message": { "type": "string" },
                     "data": { "$ref": "#/components/schemas/ConsumerResponse" }
                   }
                 }
               }
             }
           },
           "400": {
             "description": "Validation error - missing or invalid fields",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "object",
                   "properties": {
                     "error": { "type": "string" },
                     "message": { "type": "string" }
                   }
                 }
               }
             }
           },
           "409": {
             "description": "Conflict - consumer already exists with same name and city",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "object",
                   "properties": {
                     "error": { "type": "string" },
                     "message": { "type": "string" }
                   }
                 }
               }
             }
           },
           "500": {
             "description": "Internal server error"
           }
         }
       }
     },
           "/api/consumer-signin": {
        "post": {
          "summary": "Sign in consumer",
          "description": "Authenticate consumer using 6-digit PIN",
         "tags": ["Consumers"],
         "requestBody": {
           "required": true,
           "content": {
             "application/json": {
               "schema": {
                 "$ref": "#/components/schemas/ConsumerSignIn"
               },
                               "examples": {
                  "signinConsumer": {
                    "summary": "Sign in credentials",
                    "value": {
                      "pin": "123456"
                    }
                  }
                }
             }
           }
         },
         "responses": {
           "200": {
             "description": "Consumer signed in successfully",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "object",
                   "properties": {
                     "success": { "type": "boolean" },
                     "message": { "type": "string" },
                     "data": { "$ref": "#/components/schemas/ConsumerResponse" }
                   }
                 }
               }
             }
           },
           "400": {
             "description": "Validation error - missing or invalid fields",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "object",
                   "properties": {
                     "error": { "type": "string" },
                     "message": { "type": "string" }
                   }
                 }
               }
             }
           },
           "401": {
             "description": "Unauthorized - invalid credentials",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "object",
                   "properties": {
                     "error": { "type": "string" },
                     "message": { "type": "string" }
                   }
                 }
               }
             }
           },
           "500": {
             "description": "Internal server error"
           }
         }
       }
     },

    "/api/images/{filename}": {
      "get": {
        "summary": "Serve payment proof images",
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Image filename"
          }
        ],
        "responses": {
          "200": {
            "description": "Image served successfully"
          },
          "400": {
            "description": "Filename required"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ServiceProvider": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "city": { "type": "string" },
          "skillset": { "type": "string" },
          "contactNo": { "type": "string" },
          "description": { "type": "string" },
          "experience": { "type": "string" },
          "screenshot": { "type": "string", "description": "Image URL for payment proof" },
          "pin": { 
            "type": "string", 
            "description": "6-digit PIN code",
            "pattern": "^[0-9]{6}$",
            "minLength": 6,
            "maxLength": 6
          }
        },
        "required": ["name", "city", "skillset", "contactNo", "pin"]
      },
      "ServiceProviderFilter": {
        "type": "object",
        "properties": {
          "city": { "type": "string" },
          "skillset": { "type": "string" },
          "experience": { "type": "string" },
          "name": { "type": "string" },
          "search": { "type": "string" }
        }
      },
             "Consumer": {
         "type": "object",
         "properties": {
           "name": { 
             "type": "string",
             "description": "Consumer's full name",
             "example": "John Doe"
           },
           "city": { 
             "type": "string",
             "description": "Consumer's city",
             "example": "Karachi"
           },
           "pin": { 
             "type": "string", 
             "description": "6-digit PIN code",
             "pattern": "^[0-9]{6}$",
             "minLength": 6,
             "maxLength": 6,
             "example": "123456"
           }
         },
         "required": ["name", "city", "pin"]
       },
       "ConsumerSignIn": {
         "type": "object",
         "properties": {
           "pin": { 
             "type": "string", 
             "description": "6-digit PIN code",
             "pattern": "^[0-9]{6}$",
             "minLength": 6,
             "maxLength": 6,
             "example": "123456"
           }
         },
         "required": ["pin"]
       },
      "ConsumerResponse": {
        "type": "object",
        "properties": {
          "id": { 
            "type": "integer",
            "description": "Unique consumer ID",
            "example": 1
          },
          "name": { 
            "type": "string",
            "description": "Consumer's full name",
            "example": "John Doe"
          },
          "city": { 
            "type": "string",
            "description": "Consumer's city",
            "example": "Karachi"
          },
                  "pin": {
          "type": "string",
          "description": "6-digit PIN code",
          "example": "123456"
        },
          "createdAt": { 
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updatedAt": { 
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        }
      },
      "ServiceProviderResponse": {
        "type": "object",
        "properties": {
          "id": { 
            "type": "integer",
            "description": "Unique service provider ID",
            "example": 1
          },
          "name": { 
            "type": "string",
            "description": "Service provider's full name",
            "example": "Ahmed Khan"
          },
          "city": { 
            "type": "string",
            "description": "Service provider's city",
            "example": "Karachi"
          },
          "skillset": { 
            "type": "string",
            "description": "Service provider's skills/expertise",
            "example": "Plumbing"
          },
          "contactNo": { 
            "type": "string",
            "description": "Service provider's contact number",
            "example": "+92-300-1234567"
          },
          "description": { 
            "type": "string",
            "description": "Service provider's description",
            "example": "Professional plumber with 5 years experience"
          },
          "experience": { 
            "type": "string",
            "description": "Service provider's experience",
            "example": "5 years"
          },
          "isActive": { 
            "type": "boolean",
            "description": "Whether the service provider is active",
            "example": true
          },
          "status": { 
            "type": "integer",
            "description": "Subscription status (1=active, 0=expired)",
            "example": 1
          },
          "subscriptionStartDate": { 
            "type": "string",
            "format": "date-time",
            "description": "Subscription start date",
            "example": "2024-01-01T00:00:00Z"
          },
          "subscriptionEndDate": { 
            "type": "string",
            "format": "date-time",
            "description": "Subscription end date",
            "example": "2024-02-01T00:00:00Z"
          },
          "createdAt": { 
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updatedAt": { 
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        }
      }
    }
  }
}