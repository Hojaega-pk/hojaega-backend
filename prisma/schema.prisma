generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ServiceProvider {
  id                    Int                       @id @default(autoincrement())
  name                  String
  city                  String
  skillset              String
  contactNo             String
  pin                   String?                   // Stores hashed PIN for authentication
  description           String?
  experience            String?
  isActive              Boolean                   @default(true)
  status                Int                       @default(1)
  subscriptionStartDate DateTime                  @default(now())
  subscriptionEndDate   DateTime
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt

  // Relations
  payments              ServiceProviderPayment[]
  conversations         Conversation[]

  @@map("service_providers")
}

model ServiceProviderPayment {
  id                Int            @id @default(autoincrement())
  serviceProviderId Int
  amount            Float
  screenshotPath    String?        // stores relative path of uploaded screenshot
  createdAt         DateTime       @default(now())

  // Relation: Payment belongs to one service provider
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])

  @@map("service_provider_payments")
}

model Consumer {
  id        Int      @id @default(autoincrement())
  name      String
  city      String
  contactNo String   // Stores user's phone number for authentication
  pin       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  conversations Conversation[]

  @@map("consumers")
}

enum OtpPurpose {
  SP_SIGNIN
  CONSUMER_SIGNIN
  GENERIC
  PIN_RESET
}

model OtpCode {
  id         Int         @id @default(autoincrement())
  contactNo  String
  purpose    OtpPurpose
  codeHash   String
  expiresAt  DateTime
  createdAt  DateTime    @default(now())
  consumedAt DateTime?
  attempts   Int         @default(0)

  @@index([contactNo, purpose, expiresAt])
  @@map("otp_codes")
}

// New models for messaging system
enum MessageType {
  OFFER
  ACCEPT
  DECLINE
  CHARGE
  PAYMENT
  GENERAL
  SYSTEM
}

enum ConversationStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model Conversation {
  id                Int                 @id @default(autoincrement())
  serviceProviderId Int
  consumerId        Int
  status            ConversationStatus  @default(ACTIVE)
  lastMessageAt     DateTime            @default(now())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  serviceProvider   ServiceProvider     @relation(fields: [serviceProviderId], references: [id])
  consumer          Consumer            @relation(fields: [consumerId], references: [id])
  messages          Message[]

  @@unique([serviceProviderId, consumerId])
  @@map("conversations")
}

model Message {
  id             Int         @id @default(autoincrement())
  conversationId Int
  senderId       Int
  senderType     String      // "service_provider" or "consumer"
  messageType    MessageType @default(GENERAL)
  content        String
  metadata       Json?       // For storing additional data like offer amount, charges, etc.
  isRead         Boolean     @default(false)
  createdAt      DateTime    @default(now())

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@index([conversationId, createdAt])
  @@index([senderId, senderType])
  @@map("messages")
}